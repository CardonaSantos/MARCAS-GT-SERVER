// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Ubicacion {
  id        Int      @id @default(autoincrement())
  latitud   Float
  longitud  Float
  timestamp DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
}



model Categoria {
  id         Int                 @id @default(autoincrement())
  nombre     String
  productos  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria

  creadoEn   DateTime            @default(now())
  actualizadoEn DateTime         @updatedAt
}

model Producto {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float              // Precio de venta del producto
  stock       Stock?             // Relación uno a uno con Stock
  categorias  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria
  ventas      VentaProducto[]    // Relación a la tabla intermedia VentaProducto
  entregas    EntregaStockProducto[] // Relación a la tabla intermedia EntregaStockProducto

  codigoProducto String          @unique// NUEVO A APLICAR
  creadoEn    DateTime           @default(now())
  actualizadoEn DateTime         @updatedAt
}

model ProductoCategoria {
  id          Int        @id @default(autoincrement())
  producto    Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int
  categoria   Categoria   @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  categoriaId Int

  creadoEn    DateTime    @default(now())
  actualizadoEn DateTime  @updatedAt
}

model EntregaStock {
  id           Int                    @id @default(autoincrement())
  proveedor    Proveedor               @relation(fields: [proveedorId], references: [id])
  proveedorId  Int
  timestamp    DateTime                @default(now()) // Fecha de la entrega
  productos    EntregaStockProducto[]  // Relación con los productos entregados

  creadoEn     DateTime                @default(now())
  actualizadoEn DateTime               @updatedAt
  total_pagado Int//NUEVO PARA SABER CUANTO FUE EL TOTAL DE LA ENTREGA
}

model EntregaStockProducto {
  id           Int        @id @default(autoincrement())
  producto     Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId   Int
  entregaStock EntregaStock @relation(fields: [entregaStockId], references: [id], onDelete: Cascade)
  entregaStockId Int
  cantidad     Int         // Cantidad de este producto en esta entrega
  costoUnitario Float      // Costo por unidad de este producto en esta entrega
}

model Stock {
  id          Int       @id @default(autoincrement())
  producto    Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int        @unique
  proveedor   Proveedor  @relation(fields: [proveedorId], references: [id])
  proveedorId Int
  cantidad    Int        // Cantidad total de este producto en stock
  costoTotal  Float      // Costo total de adquisición de todos los productos en stock  creadoEn    DateTime   @default(now())
  actualizadoEn DateTime @updatedAt
}

model Proveedor {
  id          Int       @id @default(autoincrement())
  nombre      String
  correo      String    @unique
  telefono    String
  direccion   String?
  productos   Stock[]   // Relación con el stock de productos
  entregas    EntregaStock[]  // Relación con las entregas de stock

  creadoEn    DateTime  @default(now())
  actualizadoEn DateTime @updatedAt
}




model VentaProducto {
  id          Int      @id @default(autoincrement())
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade) // Añadir Cascade aquí
  productoId  Int
  venta       Venta     @relation(fields: [ventaId], references: [id], onDelete: Cascade) // Si también necesitas eliminar las ventas asociadas
  ventaId     Int
  cantidad    Int
  precio      Float
  creadoEn    DateTime  @default(now())
}


model Descuento {
  id          Int      @id @default(autoincrement())
  porcentaje  Float    // Descuento en porcentaje (ej. 6.0 para un 6%)
  cliente     Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId   Int
  activo      Boolean  @default(true) // Si el descuento está activo y puede ser aplicado
  creadoEn    DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}

enum EstadoSolicitud {
  PENDIENTE
  ACEPTADA
  RECHAZADA
}

model SolicitudDescuento {
  id           Int      @id @default(autoincrement())
  porcentaje   Float    // Porcentaje solicitado
  estado       EstadoSolicitud @default(PENDIENTE) // Establecer PENDIENTE como valor predeterminado
  vendedor     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId    Int
  creadoEn     DateTime @default(now())
}


model Notificacion {
  id              Int      @id @default(autoincrement())
  mensaje         String
  leido           Boolean  @default(false)
  remitente       Usuario  @relation("NotificacionesEnviadas", fields: [remitenteId], references: [id])
  remitenteId     Int
  destinatario    Usuario  @relation("NotificacionesRecibidas", fields: [destinatarioId], references: [id])
  destinatarioId  Int
  creadoEn        DateTime @default(now())
}

model Asistencia {
  id              Int      @id @default(autoincrement())
  fecha           DateTime // Agregando un campo para la fecha específica
  entrada         DateTime
  salida          DateTime? // Puede estar en null si aún no ha salido
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
  creadoEn        DateTime  @default(now())
}

//-----------------------------------------------
model Visita {
  id            Int      @id @default(autoincrement())
  inicio        DateTime
  fin           DateTime?
  vendedor      Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  cliente       Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId     Int
  observaciones String?
  venta         Venta?    // Ya no necesita `fields` y `references` aquí
  ventaId       Int?      @unique
  creadoEn      DateTime  @default(now())
  actualizadoEn DateTime  @updatedAt
}

model Venta {
  id                 Int      @id @default(autoincrement())
  monto              Float
  montoConDescuento  Float
  descuento          Int?
  metodoPago         MetodoPago
  timestamp          DateTime  @default(now())
  vendedor           Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId          Int
  cliente            Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId          Int
  visita             Visita?   @relation(fields: [visitaId], references: [id]) // Mantén fields y references aquí
  visitaId           Int?      @unique
  productos          VentaProducto[]
}



model Prospecto {
  id                  Int              @id @default(autoincrement())
  inicio              DateTime         @default(now()) // Se establece automáticamente al crear el prospecto
  fin                 DateTime?        // Se establece cuando se finaliza el prospecto
  vendedor            Usuario          @relation("ProspectosVendedor", fields: [usuarioId], references: [id])
  usuarioId           Int
  cliente             Cliente?         @relation(fields: [clienteId], references: [id],  onDelete: Cascade) // Relación opcional con cliente
  clienteId           Int?
  nombreCompleto      String?           // Agregado para capturar el nombre completo
  empresaTienda       String?          // Agregado para capturar el nombre de la empresa o tienda
  telefono            String?          // Mapeado desde el formulario, opcional
  correo              String?          // Mapeado desde el formulario, opcional
  direccion           String?          // Dirección del negocio o lugar visitado
  tipoCliente         TipoCliente?     // Mapeado desde tipoCliente en el formulario
  categoriasInteres   String[]         // Mapeado desde el formulario
  volumenCompra       String?          // Mapeado desde el formulario, opcional
  presupuestoMensual  String?          // Mapeado desde el formulario, opcional
  preferenciaContacto String?          // Mapeado desde el formulario, opcional
  comentarios         String?          // Comentarios u observaciones del prospecto
  creadoEn            DateTime         @default(now()) // Se establece automáticamente
  actualizadoEn       DateTime         @updatedAt       // Se actualiza automáticamente
  estado              EstadoProspecto   @default(EN_PROSPECTO) // Usar solo el valor sin el nombre del enum
  //--RELACIONES CON UBICACIONES:
  municipio           Municipio?       @relation(fields: [municipioId], references: [id]) // Relación con el municipio
  municipioId         Int?
  departamento        Departamento?    @relation(fields: [departamentoId], references: [id]) // Relación con el departamento
  departamentoId      Int?
  //----------------------------
    //-- Relación uno a uno con UbicacionProspecto
  //-- Relación uno a uno con UbicacionProspecto
  ubicacion           UbicacionProspecto? @relation(fields: [ubicacionId], references: [id])
  ubicacionId         Int?  @unique  // Mantener @unique aquí para relación uno a uno

}

model UbicacionProspecto {
  id         Int        @id @default(autoincrement())
  latitud    Float
  longitud   Float
  prospecto  Prospecto?  @relation  // Eliminar los atributos `fields` y `references`
  prospectoId Int       // No necesita ser único aquí
  creadoEn   DateTime   @default(now())
}


enum EstadoProspecto {
  EN_PROSPECTO
  FINALIZADO
  CERRADO
}


model Cliente {
  id                   Int                 @id @default(autoincrement())//-
  nombre               String//-
  correo               String              @unique//-
  telefono             String//-
  direccion            String              // DIRECCIÓN TIPO STRING DESCRITO//-
  ventas               Venta[]//-
  solicitudesDescuento SolicitudDescuento[]//(?)
  descuentos           Descuento[]//-
  prospectos           Prospecto[]//-
  creadoEn             DateTime            @default(now())//-
  actualizadoEn        DateTime            @updatedAt//-
  visitas              Visita[]//-
  municipio            Municipio?          @relation(fields: [municipioId], references: [id])//EN UBICACION TABLA
  municipioId          Int?//EN UBICACION TABLA
  departamento         Departamento?       @relation(fields: [departamentoId], references: [id])//EN UBICACION TABLA
  departamentoId       Int?//EN UBICACION TABLA
  ubicacion            UbicacionCliente?   @relation(name: "ClienteToUbicacionCliente")
  ubicacionId          Int? @unique        // Clave foránea única para uno-a-uno
  tipoCliente String?
  categoriasInteres   String[]         // Mapeado desde el formulario
  volumenCompra String?
  presupuestoMensual String?
  preferenciaContacto String?
  comentarios String?
}


model UbicacionCliente {
  id         Int      @id @default(autoincrement())
  latitud    Float    // Latitud geográfica
  longitud   Float    // Longitud geográfica
  
  cliente    Cliente? @relation(name: "ClienteToUbicacionCliente", fields: [clienteId], references: [id], onDelete: Cascade)//DELETE CASCADA CLIENTE
  clienteId  Int?     @unique             // Clave foránea única para uno-a-uno
}


model Departamento {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  municipios Municipio[] // Relación con municipios
  prospectos Prospecto[] // Relación con los prospectos
  clientes   Cliente[]   // Relación con los clientes
}


model Municipio {
  id             Int         @id @default(autoincrement())
  nombre         String      @unique
  departamento   Departamento @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  departamentoId Int
  prospectos     Prospecto[]  // Relación con los prospectos
  clientes       Cliente[]    // Relación con los clientes
}



model Usuario {
  id                    Int              @id @default(autoincrement())
  nombre                String
  correo                String           @unique
  contrasena            String
  rol                   Rol
  ubicaciones           Ubicacion[]
  ventas                Venta[]
  solicitudesDescuento  SolicitudDescuento[]
  notificacionesEnviadas Notificacion[]  @relation("NotificacionesEnviadas")
  notificacionesRecibidas Notificacion[] @relation("NotificacionesRecibidas")
  registrosAsistencia   Asistencia[]
  prospectos            Prospecto[]      @relation("ProspectosVendedor") // Relación con Prospecto

  creadoEn              DateTime         @default(now())
  actualizadoEn         DateTime         @updatedAt

  visitas    Visita[] // Relación con el modelo Visita
}

enum Rol {
  ADMIN
  VENDEDOR
}

enum MetodoPago {
  CONTADO
  TARJETA
  TRANSFERENCIA_BANCO
}
// Enums añadidos
   
enum TipoCliente {
  Minorista
  Mayorista
  Boutique
  TiendaEnLinea
  ClienteIndividual
}

enum ActividadNegocio {
  VENTA_ROPA
  VENTA_COMIDA
  SERVICIO_TECNICO
  CONSULTORIA
  OTRO
}

enum NivelInteres {
  MUY_BAJO
  BAJO
  MODERADO
  ALTO
  MUY_ALTO
}
